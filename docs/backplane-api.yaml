openapi: 3.0.3
info:
  title: Backplane-API
  description: API For backplane
  version: 1.0.0
servers:
  - url: 'https://backplane-api.private.hive.cluster.openshift.com'
x-cluster-id-param: &cluster-id-param
  name: clusterId
  in: path
  description: The cluster internal UUID
  required: true
  schema:
    type: string

x-base-errors: &base-errors
  content:
    '*/*':
      schema:
        $ref: '#/components/schemas/Error'
  description: Error

x-k8s-proxy: &k8s-proxy
  summary: Proxy kubectl/oc api requests, opaque in backplane-api
  responses:
    1XX:
      description: 1XX
    2XX:
      description: 2XX
    3XX:
      description: 3XX
    4XX:
      description: 4XX
    5XX:
      description: 5XX

x-script-lang: &script-lang
  - python
  - bash

paths:

  /backplane/cluster/{clusterId}/:
    parameters:
      - *cluster-id-param
    get: *k8s-proxy
    post: *k8s-proxy
    patch: *k8s-proxy
    delete: *k8s-proxy
    put: *k8s-proxy
    options: *k8s-proxy
    head: *k8s-proxy
    trace: *k8s-proxy

  /backplane/login/{clusterId}/:
    parameters:
      - *cluster-id-param
    post:
      operationId: loginCluster
      summary: Login to a cluster
      responses:
        200:
          description: Login successful, returns proxy uri in the return object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        400:
          <<: *base-errors
        403:
          <<: *base-errors
        500:
          <<: *base-errors

  /backplane/testscript/{clusterId}:
    post:
      operationId: createTestScriptRun
      summary: Internal ONLY API to get test runs, only available in non-production environments
      parameters:
        - *cluster-id-param
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTestJob'
      responses:
        200:
          description: Creation of test script run successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestJobResult'
        401:
          <<: *base-errors
          description: Unauthorized
        403:
          <<: *base-errors
          description: Forbidden
        404:
          <<: *base-errors
          description: API not available
        500:
          <<: *base-errors

  /backplane/testscript/{clusterId}/{testId}/logs:
    get:
      operationId: getTestScriptRunLogs
      summary: Internal ONLY API to get test runs logs, only available in non-production environments
      parameters:
        - name: testId
          in: path
          description: The unique testId generated by the post request to create new test run
          required: true
          schema:
            type: string
        - in: query
          name: version
          schema:
            type: string
          description: The version to return. Default is JSON, v2 is streaming
        - in : query
          name: follow  
          schema:
            type: boolean
          description: Specify if the logs should be followed.   

        - *cluster-id-param
      responses:
        200:
          description: Test run logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logs'
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Logs'
        401:
          <<: *base-errors
          description: Unauthorized
        403:
          <<: *base-errors
          description: Forbidden
        404:
          <<: *base-errors
          description: API not available
        500:
          <<: *base-errors

  /backplane/testscript/{clusterId}/{testId}:
    get:
      operationId: getTestScriptRun
      summary: Internal ONLY API to create test runs, only available in non-production environments
      parameters:
        - name: testId
          in: path
          description: The unique testId generated by the post request to create new test run
          required: true
          schema:
            type: string
        - *cluster-id-param
      responses:
        200:
          description: Test run results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestJobResult'
        401:
          <<: *base-errors
          description: Unauthorized
        403:
          <<: *base-errors
          description: Forbidden
        404:
          <<: *base-errors
          description: API not available
        500:
          <<: *base-errors


  /backplane/script:
    get:
      operationId: getScripts
      summary: Get list of backplane scripts the user has access to
      parameters:
        - in: query
          name: scriptname
          required: false
          schema:
            type: string
      responses:
        403:
          <<: *base-errors
          description: Forbidden
        404:
          <<: *base-errors
          description: Script Not Found
        500:
          <<: *base-errors
          description: Unable to get available scripts
        400:
          <<: *base-errors
          description: Bad Request
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scripts'
  /backplane/script/{clusterId}/job:
    parameters:
      - *cluster-id-param
    post:
      operationId: createJob
      summary: Create a job. Not to be confused with k8s job resource
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateJob'
      responses:
        500:
          description: Unable to create the job
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        400:
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        200:
          description: Successfully started a job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
    get:
      operationId: getAllJobs
      summary: Get all job runs in the namespace the user has access to
      responses:
        400:
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unable to create the job
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        200:
          description: Job status
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
  /backplane/script/{clusterId}/job/{jobId}:
    delete:
      operationId: deleteJob
      summary: Stop a job run (interrupt), and remove all resources related to this job
      parameters:
        - name: jobId
          in: path
          description: The unique job ID of the script
          required: true
          schema:
            type: string
        - *cluster-id-param
      responses:
        400:
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unable to delete the job
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        502:
          description: Unable to delete the job, cluster error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Job not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        200:
          description: Ok
    get:
      operationId: getRun
      summary: Get job execution status
      parameters:
        - name: jobId
          in: path
          description: The unique execution ID of the script
          required: true
          schema:
            type: string
        - *cluster-id-param
      responses:
        400:
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unable to query for the job
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Script execution not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        200:
          description: Run script status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
  /backplane/script/{clusterId}/job/{jobId}/logs:
    get:
      operationId: getJobLogs
      summary: Get logs of a script run
      parameters:
        - name: jobId
          in: path
          description: The unique job ID of the script
          required: true
          schema:
            type: string
        - in: query
          name: version
          schema:
            type: string
          description: The version to return. Default is JSON, v2 is streaming
        - in : query
          name: follow  
          schema:
            type: boolean
          description: Specify if the logs should be followed.
        - *cluster-id-param
      responses:
        400:
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unable to fetch the logs
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Job not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        200:
          description: Pod logs of the job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logs'
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/Logs'
  /backplane/cloud/credentials/{clusterId}:
    get:
      operationId: getCloudCredentials
      summary: Get cloud credentials for a cluster
      parameters:
        - *cluster-id-param
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudCredentialsResponse'
        400:
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        503:
          description: Handler disabled
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Cluster not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        406:
          description: Not acceptable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
  /backplane/cloud/console/{clusterId}:
    get:
      operationId: getCloudConsole
      summary: Get cloud console url for a cluster
      parameters:
        - *cluster-id-param
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudCredentialsResponse'
        400:
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Cluster not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
        406:
          description: Not acceptable
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: jwt
      description: JWT token auth
  schemas:

    CreateTestJob:
      description: Body for creating a test job
      type: object
      required:
        - scriptBody
        - scriptMetadata
      properties:
        scriptMetadata:
          $ref: "#/components/schemas/ScriptMetadata"
        scriptBody:
          type: string
          description: Base64 encoded script body to run
        dryRun:
          type: boolean
          description: Flag to indicate whether to generate a template or execute the script
        parameters:
          type: object
          additionalProperties:
            type: string
          description: |
            A map of parameters for the script, must be a flat object and matches
            the parameters declared on the metadata

    TestJobResult:
      description: Body of response for a test job run
      type: object
      required:
        - testId
      properties:
        testId:
          description: A unique id for test script run
          type: string
        message:
          type: string
        status:
          description: Test run status
          type: string
          enum:
            - Running
            - Succeeded
            - Failed
            - Pending

    CloudCredentialsResponse:
      description: Response for cloud handler
      type: object
      required:
        - clusterID
        - statusCode
      properties:
        clusterID:
          type: string
          description: ClusterID
        consoleLink:
          type: string
          description: Link to the console, optional
        credentials:
          type: string
          description: Cloud credentials, optional
        region:
          type: string
          description: Region, optional

    Metav1Status:
      description: A k8s Metav1 status, which can be properlly parsed by oc/kubectl to display a message
      properties:
        code:
          type: integer
          description: HTTP return code
        status:
          type: string
          description: metav1.Status status string
        reason:
          type: string
          description: A reason string provided to the client
        message:
          type: string
          description: A helpful message
        details:
          type: object
          description: a metav1.StatusDetails object, unused in backplane currently

    Error:
      type: object
      properties: &error-obj
        statusCode:
          type: integer
          description: HTTP status code
        message:
          type: string
          description: Error Message
    CreateJob:
      type: object
      properties:
        canonicalName:
          type: string
          description: Name of the script to run
        parameters:
          type: object
          additionalProperties:
            type: string
          description: |
            A map of parameters for the script, must be a flat object and matches
            the parameters declared on the metadata
    JobStatus:
      type: object
      properties:
        namespace:
          type: string
          description: Namespace of the script being ran
        start:
          type: string
          format: date-time
          description: Start time of the script
        end:
          type: string
          format: date-time
          description: End/Finish time of the script
          nullable: true
        script:
          type: object
          $ref: '#/components/schemas/Script'
          description: Script the job is referencing to
        envs:
          type: array
          items:
            $ref: '#/components/schemas/EnvRealised'
          description: A array of environment parameters for the script
        status:
          type: string
          description: status of the script
          enum:
            - Pending
            - Running
            - Succeeded
            - Failed
            - Unknown
            - Killed # backplane-api only
    Job:
      type: object
      properties:
        jobId:
          type: string
          description: An unique id to identify this job run
        message:
          type: string
          description: A helpful message to the user
        userMD5:
          type: string
          description: MD5 of the user who created the job
        jobStatus:
          $ref: '#/components/schemas/JobStatus'
    Script:
      type: object
      properties:
        path:
          type: string
          description: Path from the repo root to the script
        canonicalName:
          type: string
          description: |
            Fully qualified name of the script, in the format of roleId/scriptname.
            Must be unique, MR in-place check to enforce this
        description:
          type: string
          description: A brief description of the script and what it does
        shortDescription:
          type: string
          description: A shorter description for tables and lists
        author:
          type: string
          description: Author of the script, github username
        permalink:
          type: string
          description: Permalink to the script file on git
        envs:
          type: array
          items:
            $ref: '#/components/schemas/EnvDecl'
          description: An array of environment variables for the script
        rbac:
          type: object
          $ref: '#/components/schemas/RBAC'
        allowedGroups:
          type: array
          items:
            type: string
          description: Which groups are allowed to run this script
        labels:
          type: array
          items:
            type: 
          description: An array of labels for the script
        language:
          description: The script language
          type: string
          enum: *script-lang
    RoleRbacDecl:
      type: object
      properties:
        namespace:
          type: string
        rules:
          type: array
          items:
            $ref: '#/components/schemas/PolicyRule'
    PolicyRule:
      type: object
      properties:
        nonResourceURLs:
          type: array
          items:
            type: string
          x-oapi-codegen-extra-tags:
            yaml: nonResourceURLs,omitempty
        resourceNames:
          type: array
          items:
            type: string
          x-oapi-codegen-extra-tags:
            yaml: resourceNames,omitempty
        resources:
          type: array
          items:
            type: string
          x-oapi-codegen-extra-tags:
            yaml: resources,omitempty
        apiGroups:
          type: array
          items:
            type: string
          x-oapi-codegen-extra-tags:
            yaml: apiGroups,omitempty
        verbs:
          type: array
          x-oapi-codegen-extra-tags:
            yaml: verbs,omitempty
          items:
            type: string

    EnvDecl:
      type: object
      properties:
        key:
          type: string
          description: Key of the env
        description:
          type: string
          description: A description of the env var
        optional:
          type: boolean
          description: Whether this env var is optional
    LabelDecl:
      type: object
      properties:
        key:
          type: string
          description: Key of the label
        description:
          type: string
          description: A brief description of the label
        values:
          type: array
          description: Values for the label
    EnvRealised:
      type: object
      properties:
        key:
          type: string
          description: Key of the env
        value:
          type: string
          description: The processed value of the env var
    Scripts:
      type: array
      items:
        $ref: '#/components/schemas/Script'
    Logs:
      type: object
      properties:
        logs:
          type: string
          description: Logs of the pod

    LoginResponse:
      description: Login status response
      properties:
        proxy_uri:
          type: string
          description: KubeAPI proxy URI
        statusCode:
          type: integer
          description: status code
        message:
          type: string
          description: message

    RBAC:
      description: RBAC declaration
      x-oapi-codegen-extra-tags:
        yaml: rbac,omitempty
      properties:
        clusterRoleRules:
          type: array
          x-oapi-codegen-extra-tags:
            yaml: clusterRoleRules,omitempty
          items:
            $ref: '#/components/schemas/PolicyRule'
        roles:
          type: array
          x-oapi-codegen-extra-tags:
            yaml: roles,omitempty
          items:
            $ref: '#/components/schemas/RoleRbacDecl'

    ScriptMetadata:
      description: Script metadata
      required:
        - file
        - name
        - description
        - shortDescription
        - author
        - rbac
        - envs
        - language
        - allowedGroups
        - labels
      properties:
        file:
          type: string
        name:
          type: string
        description:
          type: string
        shortDescription:
          type: string
        author:
          type: string
        rbac:
          type: object
          $ref: '#/components/schemas/RBAC'
        envs:
          type: array
          items:
            $ref: "#/components/schemas/EnvDecl"
        language:
          type: string
          enum: *script-lang
        allowedGroups:
          type: array
          items:
            type: string
        labels:
          type: array
          items:
            $ref: "#/components/schemas/LabelDecl"
