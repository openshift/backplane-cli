// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/backplane-cli/pkg/container (interfaces: ContainerEngine)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	container "github.com/openshift/backplane-cli/pkg/container"
)

// MockContainerEngine is a mock of ContainerEngine interface.
type MockContainerEngine struct {
	ctrl     *gomock.Controller
	recorder *MockContainerEngineMockRecorder
}

// MockContainerEngineMockRecorder is the mock recorder for MockContainerEngine.
type MockContainerEngineMockRecorder struct {
	mock *MockContainerEngine
}

// NewMockContainerEngine creates a new mock instance.
func NewMockContainerEngine(ctrl *gomock.Controller) *MockContainerEngine {
	mock := &MockContainerEngine{ctrl: ctrl}
	mock.recorder = &MockContainerEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerEngine) EXPECT() *MockContainerEngineMockRecorder {
	return m.recorder
}

// ContainerIsExist mocks base method.
func (m *MockContainerEngine) ContainerIsExist(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerIsExist", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerIsExist indicates an expected call of ContainerIsExist.
func (mr *MockContainerEngineMockRecorder) ContainerIsExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerIsExist", reflect.TypeOf((*MockContainerEngine)(nil).ContainerIsExist), arg0)
}

// PullImage mocks base method.
func (m *MockContainerEngine) PullImage(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullImage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PullImage indicates an expected call of PullImage.
func (mr *MockContainerEngineMockRecorder) PullImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullImage", reflect.TypeOf((*MockContainerEngine)(nil).PullImage), arg0)
}

// PutFileToMount mocks base method.
func (m *MockContainerEngine) PutFileToMount(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutFileToMount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutFileToMount indicates an expected call of PutFileToMount.
func (mr *MockContainerEngineMockRecorder) PutFileToMount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutFileToMount", reflect.TypeOf((*MockContainerEngine)(nil).PutFileToMount), arg0, arg1)
}

// RunConsoleContainer mocks base method.
func (m *MockContainerEngine) RunConsoleContainer(arg0, arg1 string, arg2 []string, arg3 []container.EnvVar) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunConsoleContainer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunConsoleContainer indicates an expected call of RunConsoleContainer.
func (mr *MockContainerEngineMockRecorder) RunConsoleContainer(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunConsoleContainer", reflect.TypeOf((*MockContainerEngine)(nil).RunConsoleContainer), arg0, arg1, arg2, arg3)
}

// RunMonitorPlugin mocks base method.
func (m *MockContainerEngine) RunMonitorPlugin(arg0, arg1, arg2 string, arg3 []string, arg4 []container.EnvVar) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunMonitorPlugin", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunMonitorPlugin indicates an expected call of RunMonitorPlugin.
func (mr *MockContainerEngineMockRecorder) RunMonitorPlugin(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunMonitorPlugin", reflect.TypeOf((*MockContainerEngine)(nil).RunMonitorPlugin), arg0, arg1, arg2, arg3, arg4)
}

// StopContainer mocks base method.
func (m *MockContainerEngine) StopContainer(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopContainer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopContainer indicates an expected call of StopContainer.
func (mr *MockContainerEngineMockRecorder) StopContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContainer", reflect.TypeOf((*MockContainerEngine)(nil).StopContainer), arg0)
}
