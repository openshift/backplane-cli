// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/backplane-cli/pkg/pagerduty (interfaces: PagerDutyClient)
//
// Generated by this command:
//
//	mockgen -destination=./pkg/pagerduty/mocks/clientMock.go -package=mocks github.com/openshift/backplane-cli/pkg/pagerduty PagerDutyClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pagerduty "github.com/PagerDuty/go-pagerduty"
	gomock "go.uber.org/mock/gomock"
)

// MockPagerDutyClient is a mock of PagerDutyClient interface.
type MockPagerDutyClient struct {
	ctrl     *gomock.Controller
	recorder *MockPagerDutyClientMockRecorder
	isgomock struct{}
}

// MockPagerDutyClientMockRecorder is the mock recorder for MockPagerDutyClient.
type MockPagerDutyClientMockRecorder struct {
	mock *MockPagerDutyClient
}

// NewMockPagerDutyClient creates a new mock instance.
func NewMockPagerDutyClient(ctrl *gomock.Controller) *MockPagerDutyClient {
	mock := &MockPagerDutyClient{ctrl: ctrl}
	mock.recorder = &MockPagerDutyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPagerDutyClient) EXPECT() *MockPagerDutyClientMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockPagerDutyClient) Connect(authToken string, options ...pagerduty.ClientOptions) error {
	m.ctrl.T.Helper()
	varargs := []any{authToken}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Connect", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockPagerDutyClientMockRecorder) Connect(authToken any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{authToken}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockPagerDutyClient)(nil).Connect), varargs...)
}

// GetServiceWithContext mocks base method.
func (m *MockPagerDutyClient) GetServiceWithContext(ctx context.Context, serviceID string, opts *pagerduty.GetServiceOptions) (*pagerduty.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceWithContext", ctx, serviceID, opts)
	ret0, _ := ret[0].(*pagerduty.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceWithContext indicates an expected call of GetServiceWithContext.
func (mr *MockPagerDutyClientMockRecorder) GetServiceWithContext(ctx, serviceID, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceWithContext", reflect.TypeOf((*MockPagerDutyClient)(nil).GetServiceWithContext), ctx, serviceID, opts)
}

// ListIncidentAlerts mocks base method.
func (m *MockPagerDutyClient) ListIncidentAlerts(incidentID string) (*pagerduty.ListAlertsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIncidentAlerts", incidentID)
	ret0, _ := ret[0].(*pagerduty.ListAlertsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIncidentAlerts indicates an expected call of ListIncidentAlerts.
func (mr *MockPagerDutyClientMockRecorder) ListIncidentAlerts(incidentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIncidentAlerts", reflect.TypeOf((*MockPagerDutyClient)(nil).ListIncidentAlerts), incidentID)
}

// ListIncidents mocks base method.
func (m *MockPagerDutyClient) ListIncidents(arg0 pagerduty.ListIncidentsOptions) (*pagerduty.ListIncidentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIncidents", arg0)
	ret0, _ := ret[0].(*pagerduty.ListIncidentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIncidents indicates an expected call of ListIncidents.
func (mr *MockPagerDutyClientMockRecorder) ListIncidents(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIncidents", reflect.TypeOf((*MockPagerDutyClient)(nil).ListIncidents), arg0)
}
