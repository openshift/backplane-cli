// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/backplane-cli/pkg/utils (interfaces: ShellCheckerInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockShellCheckerInterface is a mock of ShellCheckerInterface interface.
type MockShellCheckerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockShellCheckerInterfaceMockRecorder
}

// MockShellCheckerInterfaceMockRecorder is the mock recorder for MockShellCheckerInterface.
type MockShellCheckerInterfaceMockRecorder struct {
	mock *MockShellCheckerInterface
}

// NewMockShellCheckerInterface creates a new mock instance.
func NewMockShellCheckerInterface(ctrl *gomock.Controller) *MockShellCheckerInterface {
	mock := &MockShellCheckerInterface{ctrl: ctrl}
	mock.recorder = &MockShellCheckerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShellCheckerInterface) EXPECT() *MockShellCheckerInterfaceMockRecorder {
	return m.recorder
}

// IsValidShell mocks base method.
func (m *MockShellCheckerInterface) IsValidShell(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidShell", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValidShell indicates an expected call of IsValidShell.
func (mr *MockShellCheckerInterfaceMockRecorder) IsValidShell(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidShell", reflect.TypeOf((*MockShellCheckerInterface)(nil).IsValidShell), arg0)
}
