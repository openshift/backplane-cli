// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/backplane-cli/pkg/utils (interfaces: ClusterUtils)
//
// Generated by this command:
//
//	mockgen -destination=./pkg/utils/mocks/ClusterMock.go -package=mocks github.com/openshift/backplane-cli/pkg/utils ClusterUtils
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	utils "github.com/openshift/backplane-cli/pkg/utils"
	gomock "go.uber.org/mock/gomock"
)

// MockClusterUtils is a mock of ClusterUtils interface.
type MockClusterUtils struct {
	ctrl     *gomock.Controller
	recorder *MockClusterUtilsMockRecorder
	isgomock struct{}
}

// MockClusterUtilsMockRecorder is the mock recorder for MockClusterUtils.
type MockClusterUtilsMockRecorder struct {
	mock *MockClusterUtils
}

// NewMockClusterUtils creates a new mock instance.
func NewMockClusterUtils(ctrl *gomock.Controller) *MockClusterUtils {
	mock := &MockClusterUtils{ctrl: ctrl}
	mock.recorder = &MockClusterUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterUtils) EXPECT() *MockClusterUtilsMockRecorder {
	return m.recorder
}

// GetBackplaneCluster mocks base method.
func (m *MockClusterUtils) GetBackplaneCluster(params ...string) (utils.BackplaneCluster, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBackplaneCluster", varargs...)
	ret0, _ := ret[0].(utils.BackplaneCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackplaneCluster indicates an expected call of GetBackplaneCluster.
func (mr *MockClusterUtilsMockRecorder) GetBackplaneCluster(params ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackplaneCluster", reflect.TypeOf((*MockClusterUtils)(nil).GetBackplaneCluster), params...)
}

// GetBackplaneClusterFromClusterKey mocks base method.
func (m *MockClusterUtils) GetBackplaneClusterFromClusterKey(clusterKey string) (utils.BackplaneCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackplaneClusterFromClusterKey", clusterKey)
	ret0, _ := ret[0].(utils.BackplaneCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackplaneClusterFromClusterKey indicates an expected call of GetBackplaneClusterFromClusterKey.
func (mr *MockClusterUtilsMockRecorder) GetBackplaneClusterFromClusterKey(clusterKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackplaneClusterFromClusterKey", reflect.TypeOf((*MockClusterUtils)(nil).GetBackplaneClusterFromClusterKey), clusterKey)
}

// GetBackplaneClusterFromConfig mocks base method.
func (m *MockClusterUtils) GetBackplaneClusterFromConfig() (utils.BackplaneCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackplaneClusterFromConfig")
	ret0, _ := ret[0].(utils.BackplaneCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackplaneClusterFromConfig indicates an expected call of GetBackplaneClusterFromConfig.
func (mr *MockClusterUtilsMockRecorder) GetBackplaneClusterFromConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackplaneClusterFromConfig", reflect.TypeOf((*MockClusterUtils)(nil).GetBackplaneClusterFromConfig))
}

// GetClusterIDAndHostFromClusterURL mocks base method.
func (m *MockClusterUtils) GetClusterIDAndHostFromClusterURL(clusterURL string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterIDAndHostFromClusterURL", clusterURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClusterIDAndHostFromClusterURL indicates an expected call of GetClusterIDAndHostFromClusterURL.
func (mr *MockClusterUtilsMockRecorder) GetClusterIDAndHostFromClusterURL(clusterURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterIDAndHostFromClusterURL", reflect.TypeOf((*MockClusterUtils)(nil).GetClusterIDAndHostFromClusterURL), clusterURL)
}
