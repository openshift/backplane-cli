// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/backplane-cli/pkg/backplaneapi (interfaces: ClientUtils)
//
// Generated by this command:
//
//	mockgen -destination=./pkg/backplaneapi/mocks/clientUtilsMock.go -package=mocks github.com/openshift/backplane-cli/pkg/backplaneapi ClientUtils
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	Openapi "github.com/openshift/backplane-api/pkg/client"
	gomock "go.uber.org/mock/gomock"
)

// MockClientUtils is a mock of ClientUtils interface.
type MockClientUtils struct {
	ctrl     *gomock.Controller
	recorder *MockClientUtilsMockRecorder
	isgomock struct{}
}

// MockClientUtilsMockRecorder is the mock recorder for MockClientUtils.
type MockClientUtilsMockRecorder struct {
	mock *MockClientUtils
}

// NewMockClientUtils creates a new mock instance.
func NewMockClientUtils(ctrl *gomock.Controller) *MockClientUtils {
	mock := &MockClientUtils{ctrl: ctrl}
	mock.recorder = &MockClientUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientUtils) EXPECT() *MockClientUtilsMockRecorder {
	return m.recorder
}

// GetBackplaneClient mocks base method.
func (m *MockClientUtils) GetBackplaneClient(backplaneURL, ocmToken string, proxyURL *string) (Openapi.ClientInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackplaneClient", backplaneURL, ocmToken, proxyURL)
	ret0, _ := ret[0].(Openapi.ClientInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackplaneClient indicates an expected call of GetBackplaneClient.
func (mr *MockClientUtilsMockRecorder) GetBackplaneClient(backplaneURL, ocmToken, proxyURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackplaneClient", reflect.TypeOf((*MockClientUtils)(nil).GetBackplaneClient), backplaneURL, ocmToken, proxyURL)
}

// MakeBackplaneAPIClient mocks base method.
func (m *MockClientUtils) MakeBackplaneAPIClient(base string) (Openapi.ClientWithResponsesInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeBackplaneAPIClient", base)
	ret0, _ := ret[0].(Openapi.ClientWithResponsesInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeBackplaneAPIClient indicates an expected call of MakeBackplaneAPIClient.
func (mr *MockClientUtilsMockRecorder) MakeBackplaneAPIClient(base any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeBackplaneAPIClient", reflect.TypeOf((*MockClientUtils)(nil).MakeBackplaneAPIClient), base)
}

// MakeBackplaneAPIClientWithAccessToken mocks base method.
func (m *MockClientUtils) MakeBackplaneAPIClientWithAccessToken(base, accessToken string) (Openapi.ClientWithResponsesInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeBackplaneAPIClientWithAccessToken", base, accessToken)
	ret0, _ := ret[0].(Openapi.ClientWithResponsesInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeBackplaneAPIClientWithAccessToken indicates an expected call of MakeBackplaneAPIClientWithAccessToken.
func (mr *MockClientUtilsMockRecorder) MakeBackplaneAPIClientWithAccessToken(base, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeBackplaneAPIClientWithAccessToken", reflect.TypeOf((*MockClientUtils)(nil).MakeBackplaneAPIClientWithAccessToken), base, accessToken)
}

// MakeRawBackplaneAPIClient mocks base method.
func (m *MockClientUtils) MakeRawBackplaneAPIClient(base string) (Openapi.ClientInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeRawBackplaneAPIClient", base)
	ret0, _ := ret[0].(Openapi.ClientInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeRawBackplaneAPIClient indicates an expected call of MakeRawBackplaneAPIClient.
func (mr *MockClientUtilsMockRecorder) MakeRawBackplaneAPIClient(base any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRawBackplaneAPIClient", reflect.TypeOf((*MockClientUtils)(nil).MakeRawBackplaneAPIClient), base)
}

// MakeRawBackplaneAPIClientWithAccessToken mocks base method.
func (m *MockClientUtils) MakeRawBackplaneAPIClientWithAccessToken(base, accessToken string) (Openapi.ClientInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeRawBackplaneAPIClientWithAccessToken", base, accessToken)
	ret0, _ := ret[0].(Openapi.ClientInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeRawBackplaneAPIClientWithAccessToken indicates an expected call of MakeRawBackplaneAPIClientWithAccessToken.
func (mr *MockClientUtilsMockRecorder) MakeRawBackplaneAPIClientWithAccessToken(base, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRawBackplaneAPIClientWithAccessToken", reflect.TypeOf((*MockClientUtils)(nil).MakeRawBackplaneAPIClientWithAccessToken), base, accessToken)
}

// SetClientProxyURL mocks base method.
func (m *MockClientUtils) SetClientProxyURL(proxyURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetClientProxyURL", proxyURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetClientProxyURL indicates an expected call of SetClientProxyURL.
func (mr *MockClientUtilsMockRecorder) SetClientProxyURL(proxyURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClientProxyURL", reflect.TypeOf((*MockClientUtils)(nil).SetClientProxyURL), proxyURL)
}
