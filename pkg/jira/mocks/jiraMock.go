// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/backplane-cli/pkg/jira (interfaces: IssueServiceInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	jira "github.com/andygrunwald/go-jira"
	gomock "github.com/golang/mock/gomock"
)

// MockIssueServiceInterface is a mock of IssueServiceInterface interface.
type MockIssueServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockIssueServiceInterfaceMockRecorder
}

// MockIssueServiceInterfaceMockRecorder is the mock recorder for MockIssueServiceInterface.
type MockIssueServiceInterfaceMockRecorder struct {
	mock *MockIssueServiceInterface
}

// NewMockIssueServiceInterface creates a new mock instance.
func NewMockIssueServiceInterface(ctrl *gomock.Controller) *MockIssueServiceInterface {
	mock := &MockIssueServiceInterface{ctrl: ctrl}
	mock.recorder = &MockIssueServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssueServiceInterface) EXPECT() *MockIssueServiceInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIssueServiceInterface) Create(arg0 *jira.Issue) (*jira.Issue, *jira.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*jira.Issue)
	ret1, _ := ret[1].(*jira.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockIssueServiceInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIssueServiceInterface)(nil).Create), arg0)
}

// DoTransition mocks base method.
func (m *MockIssueServiceInterface) DoTransition(arg0, arg1 string) (*jira.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoTransition", arg0, arg1)
	ret0, _ := ret[0].(*jira.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoTransition indicates an expected call of DoTransition.
func (mr *MockIssueServiceInterfaceMockRecorder) DoTransition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoTransition", reflect.TypeOf((*MockIssueServiceInterface)(nil).DoTransition), arg0, arg1)
}

// Get mocks base method.
func (m *MockIssueServiceInterface) Get(arg0 string, arg1 *jira.GetQueryOptions) (*jira.Issue, *jira.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*jira.Issue)
	ret1, _ := ret[1].(*jira.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockIssueServiceInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIssueServiceInterface)(nil).Get), arg0, arg1)
}

// GetTransitions mocks base method.
func (m *MockIssueServiceInterface) GetTransitions(arg0 string) ([]jira.Transition, *jira.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransitions", arg0)
	ret0, _ := ret[0].([]jira.Transition)
	ret1, _ := ret[1].(*jira.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTransitions indicates an expected call of GetTransitions.
func (mr *MockIssueServiceInterfaceMockRecorder) GetTransitions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitions", reflect.TypeOf((*MockIssueServiceInterface)(nil).GetTransitions), arg0)
}

// Update mocks base method.
func (m *MockIssueServiceInterface) Update(arg0 *jira.Issue) (*jira.Issue, *jira.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*jira.Issue)
	ret1, _ := ret[1].(*jira.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockIssueServiceInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIssueServiceInterface)(nil).Update), arg0)
}
