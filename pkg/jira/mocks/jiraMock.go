// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/backplane-cli/pkg/jira (interfaces: IssueServiceInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	jira "github.com/andygrunwald/go-jira"
	gomock "github.com/golang/mock/gomock"
)

// MockIssueServiceInterface is a mock of IssueServiceInterface interface.
type MockIssueServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockIssueServiceInterfaceMockRecorder
}

// MockIssueServiceInterfaceMockRecorder is the mock recorder for MockIssueServiceInterface.
type MockIssueServiceInterfaceMockRecorder struct {
	mock *MockIssueServiceInterface
}

// NewMockIssueServiceInterface creates a new mock instance.
func NewMockIssueServiceInterface(ctrl *gomock.Controller) *MockIssueServiceInterface {
	mock := &MockIssueServiceInterface{ctrl: ctrl}
	mock.recorder = &MockIssueServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssueServiceInterface) EXPECT() *MockIssueServiceInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIssueServiceInterface) Create(issue *jira.Issue) (*jira.Issue, *jira.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", issue)
	ret0, _ := ret[0].(*jira.Issue)
	ret1, _ := ret[1].(*jira.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockIssueServiceInterfaceMockRecorder) Create(issue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIssueServiceInterface)(nil).Create), issue)
}

// DoTransition mocks base method.
func (m *MockIssueServiceInterface) DoTransition(ticketID, transitionID string) (*jira.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoTransition", ticketID, transitionID)
	ret0, _ := ret[0].(*jira.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoTransition indicates an expected call of DoTransition.
func (mr *MockIssueServiceInterfaceMockRecorder) DoTransition(ticketID, transitionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoTransition", reflect.TypeOf((*MockIssueServiceInterface)(nil).DoTransition), ticketID, transitionID)
}

// Get mocks base method.
func (m *MockIssueServiceInterface) Get(issueID string, options *jira.GetQueryOptions) (*jira.Issue, *jira.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", issueID, options)
	ret0, _ := ret[0].(*jira.Issue)
	ret1, _ := ret[1].(*jira.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockIssueServiceInterfaceMockRecorder) Get(issueID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIssueServiceInterface)(nil).Get), issueID, options)
}

// GetTransitions mocks base method.
func (m *MockIssueServiceInterface) GetTransitions(id string) ([]jira.Transition, *jira.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransitions", id)
	ret0, _ := ret[0].([]jira.Transition)
	ret1, _ := ret[1].(*jira.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTransitions indicates an expected call of GetTransitions.
func (mr *MockIssueServiceInterfaceMockRecorder) GetTransitions(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransitions", reflect.TypeOf((*MockIssueServiceInterface)(nil).GetTransitions), id)
}

// Update mocks base method.
func (m *MockIssueServiceInterface) Update(issue *jira.Issue) (*jira.Issue, *jira.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", issue)
	ret0, _ := ret[0].(*jira.Issue)
	ret1, _ := ret[1].(*jira.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockIssueServiceInterfaceMockRecorder) Update(issue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIssueServiceInterface)(nil).Update), issue)
}

// MockIssueServiceGetter is a mock of IssueServiceGetter interface.
type MockIssueServiceGetter struct {
	ctrl     *gomock.Controller
	recorder *MockIssueServiceGetterMockRecorder
}

// MockIssueServiceGetterMockRecorder is the mock recorder for MockIssueServiceGetter.
type MockIssueServiceGetterMockRecorder struct {
	mock *MockIssueServiceGetter
}

// NewMockIssueServiceGetter creates a new mock instance.
func NewMockIssueServiceGetter(ctrl *gomock.Controller) *MockIssueServiceGetter {
	mock := &MockIssueServiceGetter{ctrl: ctrl}
	mock.recorder = &MockIssueServiceGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssueServiceGetter) EXPECT() *MockIssueServiceGetterMockRecorder {
	return m.recorder
}

// GetIssueService mocks base method.
func (m *MockIssueServiceGetter) GetIssueService() (*jira.IssueService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueService")
	ret0, _ := ret[0].(*jira.IssueService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueService indicates an expected call of GetIssueService.
func (mr *MockIssueServiceGetterMockRecorder) GetIssueService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueService", reflect.TypeOf((*MockIssueServiceGetter)(nil).GetIssueService))
}
