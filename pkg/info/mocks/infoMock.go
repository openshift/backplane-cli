// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/backplane-cli/pkg/info (interfaces: InfoService)
//
// Generated by this command:
//
//	mockgen -destination=./pkg/info/mocks/infoMock.go -package=mocks github.com/openshift/backplane-cli/pkg/info InfoService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInfoService is a mock of InfoService interface.
type MockInfoService struct {
	ctrl     *gomock.Controller
	recorder *MockInfoServiceMockRecorder
	isgomock struct{}
}

// MockInfoServiceMockRecorder is the mock recorder for MockInfoService.
type MockInfoServiceMockRecorder struct {
	mock *MockInfoService
}

// NewMockInfoService creates a new mock instance.
func NewMockInfoService(ctrl *gomock.Controller) *MockInfoService {
	mock := &MockInfoService{ctrl: ctrl}
	mock.recorder = &MockInfoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfoService) EXPECT() *MockInfoServiceMockRecorder {
	return m.recorder
}

// GetVersion mocks base method.
func (m *MockInfoService) GetVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockInfoServiceMockRecorder) GetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockInfoService)(nil).GetVersion))
}
