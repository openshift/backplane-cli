// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/backplane-api/pkg/client (interfaces: ClientInterface)
//
// Generated by this command:
//
//	mockgen -destination=./pkg/client/mocks/ClientMock.go -package=mocks github.com/openshift/backplane-api/pkg/client ClientInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	Openapi "github.com/openshift/backplane-api/pkg/client"
	gomock "go.uber.org/mock/gomock"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
	isgomock struct{}
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// CreateJob mocks base method.
func (m *MockClientInterface) CreateJob(ctx context.Context, clusterId string, body Openapi.CreateJobJSONRequestBody, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateJob", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockClientInterfaceMockRecorder) CreateJob(ctx, clusterId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockClientInterface)(nil).CreateJob), varargs...)
}

// CreateJobWithBody mocks base method.
func (m *MockClientInterface) CreateJobWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateJobWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobWithBody indicates an expected call of CreateJobWithBody.
func (mr *MockClientInterfaceMockRecorder) CreateJobWithBody(ctx, clusterId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreateJobWithBody), varargs...)
}

// CreateRemediation mocks base method.
func (m *MockClientInterface) CreateRemediation(ctx context.Context, clusterId string, params *Openapi.CreateRemediationParams, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRemediation", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRemediation indicates an expected call of CreateRemediation.
func (mr *MockClientInterfaceMockRecorder) CreateRemediation(ctx, clusterId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRemediation", reflect.TypeOf((*MockClientInterface)(nil).CreateRemediation), varargs...)
}

// CreateTestScriptRun mocks base method.
func (m *MockClientInterface) CreateTestScriptRun(ctx context.Context, clusterId string, body Openapi.CreateTestScriptRunJSONRequestBody, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTestScriptRun", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTestScriptRun indicates an expected call of CreateTestScriptRun.
func (mr *MockClientInterfaceMockRecorder) CreateTestScriptRun(ctx, clusterId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTestScriptRun", reflect.TypeOf((*MockClientInterface)(nil).CreateTestScriptRun), varargs...)
}

// CreateTestScriptRunWithBody mocks base method.
func (m *MockClientInterface) CreateTestScriptRunWithBody(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTestScriptRunWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTestScriptRunWithBody indicates an expected call of CreateTestScriptRunWithBody.
func (mr *MockClientInterfaceMockRecorder) CreateTestScriptRunWithBody(ctx, clusterId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTestScriptRunWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreateTestScriptRunWithBody), varargs...)
}

// DeleteBackplaneClusterClusterId mocks base method.
func (m *MockClientInterface) DeleteBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBackplaneClusterClusterId", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackplaneClusterClusterId indicates an expected call of DeleteBackplaneClusterClusterId.
func (mr *MockClientInterfaceMockRecorder) DeleteBackplaneClusterClusterId(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackplaneClusterClusterId", reflect.TypeOf((*MockClientInterface)(nil).DeleteBackplaneClusterClusterId), varargs...)
}

// DeleteBackplaneRemediateClusterIdRemediation mocks base method.
func (m *MockClientInterface) DeleteBackplaneRemediateClusterIdRemediation(ctx context.Context, clusterId, remediation string, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, remediation}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBackplaneRemediateClusterIdRemediation", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackplaneRemediateClusterIdRemediation indicates an expected call of DeleteBackplaneRemediateClusterIdRemediation.
func (mr *MockClientInterfaceMockRecorder) DeleteBackplaneRemediateClusterIdRemediation(ctx, clusterId, remediation any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, remediation}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackplaneRemediateClusterIdRemediation", reflect.TypeOf((*MockClientInterface)(nil).DeleteBackplaneRemediateClusterIdRemediation), varargs...)
}

// DeleteJob mocks base method.
func (m *MockClientInterface) DeleteJob(ctx context.Context, clusterId, jobId string, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, jobId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteJob", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJob indicates an expected call of DeleteJob.
func (mr *MockClientInterfaceMockRecorder) DeleteJob(ctx, clusterId, jobId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, jobId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockClientInterface)(nil).DeleteJob), varargs...)
}

// DeleteRemediation mocks base method.
func (m *MockClientInterface) DeleteRemediation(ctx context.Context, clusterId string, params *Openapi.DeleteRemediationParams, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRemediation", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRemediation indicates an expected call of DeleteRemediation.
func (mr *MockClientInterfaceMockRecorder) DeleteRemediation(ctx, clusterId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRemediation", reflect.TypeOf((*MockClientInterface)(nil).DeleteRemediation), varargs...)
}

// GetAllJobs mocks base method.
func (m *MockClientInterface) GetAllJobs(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllJobs", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJobs indicates an expected call of GetAllJobs.
func (mr *MockClientInterfaceMockRecorder) GetAllJobs(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJobs", reflect.TypeOf((*MockClientInterface)(nil).GetAllJobs), varargs...)
}

// GetAllScriptsByCluster mocks base method.
func (m *MockClientInterface) GetAllScriptsByCluster(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllScriptsByCluster", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllScriptsByCluster indicates an expected call of GetAllScriptsByCluster.
func (mr *MockClientInterfaceMockRecorder) GetAllScriptsByCluster(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllScriptsByCluster", reflect.TypeOf((*MockClientInterface)(nil).GetAllScriptsByCluster), varargs...)
}

// GetAssumeRoleSequence mocks base method.
func (m *MockClientInterface) GetAssumeRoleSequence(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssumeRoleSequence", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssumeRoleSequence indicates an expected call of GetAssumeRoleSequence.
func (mr *MockClientInterfaceMockRecorder) GetAssumeRoleSequence(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssumeRoleSequence", reflect.TypeOf((*MockClientInterface)(nil).GetAssumeRoleSequence), varargs...)
}

// GetBackplaneClusterClusterId mocks base method.
func (m *MockClientInterface) GetBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBackplaneClusterClusterId", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackplaneClusterClusterId indicates an expected call of GetBackplaneClusterClusterId.
func (mr *MockClientInterfaceMockRecorder) GetBackplaneClusterClusterId(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackplaneClusterClusterId", reflect.TypeOf((*MockClientInterface)(nil).GetBackplaneClusterClusterId), varargs...)
}

// GetBackplaneRemediateClusterIdRemediation mocks base method.
func (m *MockClientInterface) GetBackplaneRemediateClusterIdRemediation(ctx context.Context, clusterId, remediation string, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, remediation}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBackplaneRemediateClusterIdRemediation", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackplaneRemediateClusterIdRemediation indicates an expected call of GetBackplaneRemediateClusterIdRemediation.
func (mr *MockClientInterfaceMockRecorder) GetBackplaneRemediateClusterIdRemediation(ctx, clusterId, remediation any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, remediation}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackplaneRemediateClusterIdRemediation", reflect.TypeOf((*MockClientInterface)(nil).GetBackplaneRemediateClusterIdRemediation), varargs...)
}

// GetCloudConsole mocks base method.
func (m *MockClientInterface) GetCloudConsole(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCloudConsole", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudConsole indicates an expected call of GetCloudConsole.
func (mr *MockClientInterfaceMockRecorder) GetCloudConsole(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudConsole", reflect.TypeOf((*MockClientInterface)(nil).GetCloudConsole), varargs...)
}

// GetCloudCredentials mocks base method.
func (m *MockClientInterface) GetCloudCredentials(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCloudCredentials", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudCredentials indicates an expected call of GetCloudCredentials.
func (mr *MockClientInterfaceMockRecorder) GetCloudCredentials(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudCredentials", reflect.TypeOf((*MockClientInterface)(nil).GetCloudCredentials), varargs...)
}

// GetJobLogs mocks base method.
func (m *MockClientInterface) GetJobLogs(ctx context.Context, clusterId, jobId string, params *Openapi.GetJobLogsParams, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, jobId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobLogs", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobLogs indicates an expected call of GetJobLogs.
func (mr *MockClientInterfaceMockRecorder) GetJobLogs(ctx, clusterId, jobId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, jobId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobLogs", reflect.TypeOf((*MockClientInterface)(nil).GetJobLogs), varargs...)
}

// GetRun mocks base method.
func (m *MockClientInterface) GetRun(ctx context.Context, clusterId, jobId string, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, jobId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRun", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRun indicates an expected call of GetRun.
func (mr *MockClientInterfaceMockRecorder) GetRun(ctx, clusterId, jobId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, jobId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRun", reflect.TypeOf((*MockClientInterface)(nil).GetRun), varargs...)
}

// GetScriptsByCluster mocks base method.
func (m *MockClientInterface) GetScriptsByCluster(ctx context.Context, clusterId string, params *Openapi.GetScriptsByClusterParams, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetScriptsByCluster", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScriptsByCluster indicates an expected call of GetScriptsByCluster.
func (mr *MockClientInterfaceMockRecorder) GetScriptsByCluster(ctx, clusterId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScriptsByCluster", reflect.TypeOf((*MockClientInterface)(nil).GetScriptsByCluster), varargs...)
}

// GetTestScriptRun mocks base method.
func (m *MockClientInterface) GetTestScriptRun(ctx context.Context, clusterId, testId string, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, testId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTestScriptRun", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestScriptRun indicates an expected call of GetTestScriptRun.
func (mr *MockClientInterfaceMockRecorder) GetTestScriptRun(ctx, clusterId, testId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, testId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestScriptRun", reflect.TypeOf((*MockClientInterface)(nil).GetTestScriptRun), varargs...)
}

// GetTestScriptRunLogs mocks base method.
func (m *MockClientInterface) GetTestScriptRunLogs(ctx context.Context, clusterId, testId string, params *Openapi.GetTestScriptRunLogsParams, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, testId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTestScriptRunLogs", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestScriptRunLogs indicates an expected call of GetTestScriptRunLogs.
func (mr *MockClientInterfaceMockRecorder) GetTestScriptRunLogs(ctx, clusterId, testId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, testId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestScriptRunLogs", reflect.TypeOf((*MockClientInterface)(nil).GetTestScriptRunLogs), varargs...)
}

// HeadBackplaneClusterClusterId mocks base method.
func (m *MockClientInterface) HeadBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeadBackplaneClusterClusterId", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadBackplaneClusterClusterId indicates an expected call of HeadBackplaneClusterClusterId.
func (mr *MockClientInterfaceMockRecorder) HeadBackplaneClusterClusterId(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadBackplaneClusterClusterId", reflect.TypeOf((*MockClientInterface)(nil).HeadBackplaneClusterClusterId), varargs...)
}

// HeadBackplaneRemediateClusterIdRemediation mocks base method.
func (m *MockClientInterface) HeadBackplaneRemediateClusterIdRemediation(ctx context.Context, clusterId, remediation string, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, remediation}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeadBackplaneRemediateClusterIdRemediation", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadBackplaneRemediateClusterIdRemediation indicates an expected call of HeadBackplaneRemediateClusterIdRemediation.
func (mr *MockClientInterfaceMockRecorder) HeadBackplaneRemediateClusterIdRemediation(ctx, clusterId, remediation any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, remediation}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadBackplaneRemediateClusterIdRemediation", reflect.TypeOf((*MockClientInterface)(nil).HeadBackplaneRemediateClusterIdRemediation), varargs...)
}

// LoginCluster mocks base method.
func (m *MockClientInterface) LoginCluster(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginCluster", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginCluster indicates an expected call of LoginCluster.
func (mr *MockClientInterfaceMockRecorder) LoginCluster(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginCluster", reflect.TypeOf((*MockClientInterface)(nil).LoginCluster), varargs...)
}

// OptionsBackplaneClusterClusterId mocks base method.
func (m *MockClientInterface) OptionsBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OptionsBackplaneClusterClusterId", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OptionsBackplaneClusterClusterId indicates an expected call of OptionsBackplaneClusterClusterId.
func (mr *MockClientInterfaceMockRecorder) OptionsBackplaneClusterClusterId(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptionsBackplaneClusterClusterId", reflect.TypeOf((*MockClientInterface)(nil).OptionsBackplaneClusterClusterId), varargs...)
}

// OptionsBackplaneRemediateClusterIdRemediation mocks base method.
func (m *MockClientInterface) OptionsBackplaneRemediateClusterIdRemediation(ctx context.Context, clusterId, remediation string, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, remediation}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OptionsBackplaneRemediateClusterIdRemediation", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OptionsBackplaneRemediateClusterIdRemediation indicates an expected call of OptionsBackplaneRemediateClusterIdRemediation.
func (mr *MockClientInterfaceMockRecorder) OptionsBackplaneRemediateClusterIdRemediation(ctx, clusterId, remediation any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, remediation}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptionsBackplaneRemediateClusterIdRemediation", reflect.TypeOf((*MockClientInterface)(nil).OptionsBackplaneRemediateClusterIdRemediation), varargs...)
}

// PatchBackplaneClusterClusterId mocks base method.
func (m *MockClientInterface) PatchBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchBackplaneClusterClusterId", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchBackplaneClusterClusterId indicates an expected call of PatchBackplaneClusterClusterId.
func (mr *MockClientInterfaceMockRecorder) PatchBackplaneClusterClusterId(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchBackplaneClusterClusterId", reflect.TypeOf((*MockClientInterface)(nil).PatchBackplaneClusterClusterId), varargs...)
}

// PatchBackplaneRemediateClusterIdRemediation mocks base method.
func (m *MockClientInterface) PatchBackplaneRemediateClusterIdRemediation(ctx context.Context, clusterId, remediation string, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, remediation}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchBackplaneRemediateClusterIdRemediation", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchBackplaneRemediateClusterIdRemediation indicates an expected call of PatchBackplaneRemediateClusterIdRemediation.
func (mr *MockClientInterfaceMockRecorder) PatchBackplaneRemediateClusterIdRemediation(ctx, clusterId, remediation any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, remediation}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchBackplaneRemediateClusterIdRemediation", reflect.TypeOf((*MockClientInterface)(nil).PatchBackplaneRemediateClusterIdRemediation), varargs...)
}

// PostBackplaneClusterClusterId mocks base method.
func (m *MockClientInterface) PostBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostBackplaneClusterClusterId", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostBackplaneClusterClusterId indicates an expected call of PostBackplaneClusterClusterId.
func (mr *MockClientInterfaceMockRecorder) PostBackplaneClusterClusterId(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBackplaneClusterClusterId", reflect.TypeOf((*MockClientInterface)(nil).PostBackplaneClusterClusterId), varargs...)
}

// PostBackplaneRemediateClusterIdRemediation mocks base method.
func (m *MockClientInterface) PostBackplaneRemediateClusterIdRemediation(ctx context.Context, clusterId, remediation string, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, remediation}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostBackplaneRemediateClusterIdRemediation", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostBackplaneRemediateClusterIdRemediation indicates an expected call of PostBackplaneRemediateClusterIdRemediation.
func (mr *MockClientInterfaceMockRecorder) PostBackplaneRemediateClusterIdRemediation(ctx, clusterId, remediation any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, remediation}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBackplaneRemediateClusterIdRemediation", reflect.TypeOf((*MockClientInterface)(nil).PostBackplaneRemediateClusterIdRemediation), varargs...)
}

// PutBackplaneClusterClusterId mocks base method.
func (m *MockClientInterface) PutBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutBackplaneClusterClusterId", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBackplaneClusterClusterId indicates an expected call of PutBackplaneClusterClusterId.
func (mr *MockClientInterfaceMockRecorder) PutBackplaneClusterClusterId(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBackplaneClusterClusterId", reflect.TypeOf((*MockClientInterface)(nil).PutBackplaneClusterClusterId), varargs...)
}

// PutBackplaneRemediateClusterIdRemediation mocks base method.
func (m *MockClientInterface) PutBackplaneRemediateClusterIdRemediation(ctx context.Context, clusterId, remediation string, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, remediation}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutBackplaneRemediateClusterIdRemediation", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBackplaneRemediateClusterIdRemediation indicates an expected call of PutBackplaneRemediateClusterIdRemediation.
func (mr *MockClientInterfaceMockRecorder) PutBackplaneRemediateClusterIdRemediation(ctx, clusterId, remediation any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, remediation}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBackplaneRemediateClusterIdRemediation", reflect.TypeOf((*MockClientInterface)(nil).PutBackplaneRemediateClusterIdRemediation), varargs...)
}

// TraceBackplaneClusterClusterId mocks base method.
func (m *MockClientInterface) TraceBackplaneClusterClusterId(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TraceBackplaneClusterClusterId", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TraceBackplaneClusterClusterId indicates an expected call of TraceBackplaneClusterClusterId.
func (mr *MockClientInterfaceMockRecorder) TraceBackplaneClusterClusterId(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceBackplaneClusterClusterId", reflect.TypeOf((*MockClientInterface)(nil).TraceBackplaneClusterClusterId), varargs...)
}

// TraceBackplaneRemediateClusterIdRemediation mocks base method.
func (m *MockClientInterface) TraceBackplaneRemediateClusterIdRemediation(ctx context.Context, clusterId, remediation string, reqEditors ...Openapi.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, remediation}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TraceBackplaneRemediateClusterIdRemediation", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TraceBackplaneRemediateClusterIdRemediation indicates an expected call of TraceBackplaneRemediateClusterIdRemediation.
func (mr *MockClientInterfaceMockRecorder) TraceBackplaneRemediateClusterIdRemediation(ctx, clusterId, remediation any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, remediation}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceBackplaneRemediateClusterIdRemediation", reflect.TypeOf((*MockClientInterface)(nil).TraceBackplaneRemediateClusterIdRemediation), varargs...)
}
