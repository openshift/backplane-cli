// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/backplane-api/pkg/client (interfaces: ClientWithResponsesInterface)
//
// Generated by this command:
//
//	mockgen -destination=./pkg/client/mocks/ClientWithResponsesMock.go -package=mocks github.com/openshift/backplane-api/pkg/client ClientWithResponsesInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	Openapi "github.com/openshift/backplane-api/pkg/client"
	gomock "go.uber.org/mock/gomock"
)

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
	isgomock struct{}
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// CreateJobWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateJobWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...Openapi.RequestEditorFn) (*Openapi.CreateJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateJobWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.CreateJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobWithBodyWithResponse indicates an expected call of CreateJobWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateJobWithBodyWithResponse(ctx, clusterId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateJobWithBodyWithResponse), varargs...)
}

// CreateJobWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateJobWithResponse(ctx context.Context, clusterId string, body Openapi.CreateJobJSONRequestBody, reqEditors ...Openapi.RequestEditorFn) (*Openapi.CreateJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateJobWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.CreateJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobWithResponse indicates an expected call of CreateJobWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateJobWithResponse(ctx, clusterId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateJobWithResponse), varargs...)
}

// CreateRemediationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateRemediationWithResponse(ctx context.Context, clusterId string, params *Openapi.CreateRemediationParams, reqEditors ...Openapi.RequestEditorFn) (*Openapi.CreateRemediationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRemediationWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.CreateRemediationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRemediationWithResponse indicates an expected call of CreateRemediationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateRemediationWithResponse(ctx, clusterId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRemediationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateRemediationWithResponse), varargs...)
}

// CreateTestScriptRunWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateTestScriptRunWithBodyWithResponse(ctx context.Context, clusterId, contentType string, body io.Reader, reqEditors ...Openapi.RequestEditorFn) (*Openapi.CreateTestScriptRunResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTestScriptRunWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.CreateTestScriptRunResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTestScriptRunWithBodyWithResponse indicates an expected call of CreateTestScriptRunWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateTestScriptRunWithBodyWithResponse(ctx, clusterId, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTestScriptRunWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateTestScriptRunWithBodyWithResponse), varargs...)
}

// CreateTestScriptRunWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateTestScriptRunWithResponse(ctx context.Context, clusterId string, body Openapi.CreateTestScriptRunJSONRequestBody, reqEditors ...Openapi.RequestEditorFn) (*Openapi.CreateTestScriptRunResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTestScriptRunWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.CreateTestScriptRunResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTestScriptRunWithResponse indicates an expected call of CreateTestScriptRunWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateTestScriptRunWithResponse(ctx, clusterId, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTestScriptRunWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateTestScriptRunWithResponse), varargs...)
}

// DeleteBackplaneClusterClusterIdWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*Openapi.DeleteBackplaneClusterClusterIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBackplaneClusterClusterIdWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.DeleteBackplaneClusterClusterIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackplaneClusterClusterIdWithResponse indicates an expected call of DeleteBackplaneClusterClusterIdWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteBackplaneClusterClusterIdWithResponse(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackplaneClusterClusterIdWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteBackplaneClusterClusterIdWithResponse), varargs...)
}

// DeleteBackplaneRemediateClusterIdRemediationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteBackplaneRemediateClusterIdRemediationWithResponse(ctx context.Context, clusterId, remediation string, reqEditors ...Openapi.RequestEditorFn) (*Openapi.DeleteBackplaneRemediateClusterIdRemediationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, remediation}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBackplaneRemediateClusterIdRemediationWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.DeleteBackplaneRemediateClusterIdRemediationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackplaneRemediateClusterIdRemediationWithResponse indicates an expected call of DeleteBackplaneRemediateClusterIdRemediationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteBackplaneRemediateClusterIdRemediationWithResponse(ctx, clusterId, remediation any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, remediation}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackplaneRemediateClusterIdRemediationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteBackplaneRemediateClusterIdRemediationWithResponse), varargs...)
}

// DeleteJobWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteJobWithResponse(ctx context.Context, clusterId, jobId string, reqEditors ...Openapi.RequestEditorFn) (*Openapi.DeleteJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, jobId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteJobWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.DeleteJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobWithResponse indicates an expected call of DeleteJobWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteJobWithResponse(ctx, clusterId, jobId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, jobId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteJobWithResponse), varargs...)
}

// DeleteRemediationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteRemediationWithResponse(ctx context.Context, clusterId string, params *Openapi.DeleteRemediationParams, reqEditors ...Openapi.RequestEditorFn) (*Openapi.DeleteRemediationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRemediationWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.DeleteRemediationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRemediationWithResponse indicates an expected call of DeleteRemediationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteRemediationWithResponse(ctx, clusterId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRemediationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteRemediationWithResponse), varargs...)
}

// GetAllJobsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetAllJobsWithResponse(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*Openapi.GetAllJobsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllJobsWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.GetAllJobsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJobsWithResponse indicates an expected call of GetAllJobsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetAllJobsWithResponse(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJobsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetAllJobsWithResponse), varargs...)
}

// GetAssumeRoleSequenceWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetAssumeRoleSequenceWithResponse(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*Openapi.GetAssumeRoleSequenceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAssumeRoleSequenceWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.GetAssumeRoleSequenceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssumeRoleSequenceWithResponse indicates an expected call of GetAssumeRoleSequenceWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetAssumeRoleSequenceWithResponse(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssumeRoleSequenceWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetAssumeRoleSequenceWithResponse), varargs...)
}

// GetBackplaneClusterClusterIdWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*Openapi.GetBackplaneClusterClusterIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBackplaneClusterClusterIdWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.GetBackplaneClusterClusterIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackplaneClusterClusterIdWithResponse indicates an expected call of GetBackplaneClusterClusterIdWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetBackplaneClusterClusterIdWithResponse(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackplaneClusterClusterIdWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetBackplaneClusterClusterIdWithResponse), varargs...)
}

// GetBackplaneRemediateClusterIdRemediationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetBackplaneRemediateClusterIdRemediationWithResponse(ctx context.Context, clusterId, remediation string, reqEditors ...Openapi.RequestEditorFn) (*Openapi.GetBackplaneRemediateClusterIdRemediationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, remediation}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBackplaneRemediateClusterIdRemediationWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.GetBackplaneRemediateClusterIdRemediationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackplaneRemediateClusterIdRemediationWithResponse indicates an expected call of GetBackplaneRemediateClusterIdRemediationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetBackplaneRemediateClusterIdRemediationWithResponse(ctx, clusterId, remediation any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, remediation}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackplaneRemediateClusterIdRemediationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetBackplaneRemediateClusterIdRemediationWithResponse), varargs...)
}

// GetCloudConsoleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetCloudConsoleWithResponse(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*Openapi.GetCloudConsoleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCloudConsoleWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.GetCloudConsoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudConsoleWithResponse indicates an expected call of GetCloudConsoleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCloudConsoleWithResponse(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudConsoleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCloudConsoleWithResponse), varargs...)
}

// GetCloudCredentialsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetCloudCredentialsWithResponse(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*Openapi.GetCloudCredentialsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCloudCredentialsWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.GetCloudCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudCredentialsWithResponse indicates an expected call of GetCloudCredentialsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCloudCredentialsWithResponse(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudCredentialsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCloudCredentialsWithResponse), varargs...)
}

// GetJobLogsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetJobLogsWithResponse(ctx context.Context, clusterId, jobId string, params *Openapi.GetJobLogsParams, reqEditors ...Openapi.RequestEditorFn) (*Openapi.GetJobLogsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, jobId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJobLogsWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.GetJobLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobLogsWithResponse indicates an expected call of GetJobLogsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetJobLogsWithResponse(ctx, clusterId, jobId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, jobId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobLogsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetJobLogsWithResponse), varargs...)
}

// GetRunWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetRunWithResponse(ctx context.Context, clusterId, jobId string, reqEditors ...Openapi.RequestEditorFn) (*Openapi.GetRunResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, jobId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRunWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.GetRunResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunWithResponse indicates an expected call of GetRunWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetRunWithResponse(ctx, clusterId, jobId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, jobId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetRunWithResponse), varargs...)
}

// GetScriptsByClusterWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetScriptsByClusterWithResponse(ctx context.Context, clusterId string, params *Openapi.GetScriptsByClusterParams, reqEditors ...Openapi.RequestEditorFn) (*Openapi.GetScriptsByClusterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetScriptsByClusterWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.GetScriptsByClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScriptsByClusterWithResponse indicates an expected call of GetScriptsByClusterWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetScriptsByClusterWithResponse(ctx, clusterId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScriptsByClusterWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetScriptsByClusterWithResponse), varargs...)
}

// GetTestScriptRunLogsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTestScriptRunLogsWithResponse(ctx context.Context, clusterId, testId string, params *Openapi.GetTestScriptRunLogsParams, reqEditors ...Openapi.RequestEditorFn) (*Openapi.GetTestScriptRunLogsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, testId, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTestScriptRunLogsWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.GetTestScriptRunLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestScriptRunLogsWithResponse indicates an expected call of GetTestScriptRunLogsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTestScriptRunLogsWithResponse(ctx, clusterId, testId, params any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, testId, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestScriptRunLogsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTestScriptRunLogsWithResponse), varargs...)
}

// GetTestScriptRunWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetTestScriptRunWithResponse(ctx context.Context, clusterId, testId string, reqEditors ...Openapi.RequestEditorFn) (*Openapi.GetTestScriptRunResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, testId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTestScriptRunWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.GetTestScriptRunResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestScriptRunWithResponse indicates an expected call of GetTestScriptRunWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetTestScriptRunWithResponse(ctx, clusterId, testId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, testId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestScriptRunWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetTestScriptRunWithResponse), varargs...)
}

// HeadBackplaneClusterClusterIdWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HeadBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*Openapi.HeadBackplaneClusterClusterIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeadBackplaneClusterClusterIdWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.HeadBackplaneClusterClusterIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadBackplaneClusterClusterIdWithResponse indicates an expected call of HeadBackplaneClusterClusterIdWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HeadBackplaneClusterClusterIdWithResponse(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadBackplaneClusterClusterIdWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HeadBackplaneClusterClusterIdWithResponse), varargs...)
}

// HeadBackplaneRemediateClusterIdRemediationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) HeadBackplaneRemediateClusterIdRemediationWithResponse(ctx context.Context, clusterId, remediation string, reqEditors ...Openapi.RequestEditorFn) (*Openapi.HeadBackplaneRemediateClusterIdRemediationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, remediation}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HeadBackplaneRemediateClusterIdRemediationWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.HeadBackplaneRemediateClusterIdRemediationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HeadBackplaneRemediateClusterIdRemediationWithResponse indicates an expected call of HeadBackplaneRemediateClusterIdRemediationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) HeadBackplaneRemediateClusterIdRemediationWithResponse(ctx, clusterId, remediation any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, remediation}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadBackplaneRemediateClusterIdRemediationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HeadBackplaneRemediateClusterIdRemediationWithResponse), varargs...)
}

// LoginClusterWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) LoginClusterWithResponse(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*Openapi.LoginClusterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoginClusterWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.LoginClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginClusterWithResponse indicates an expected call of LoginClusterWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) LoginClusterWithResponse(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginClusterWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).LoginClusterWithResponse), varargs...)
}

// OptionsBackplaneClusterClusterIdWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) OptionsBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*Openapi.OptionsBackplaneClusterClusterIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OptionsBackplaneClusterClusterIdWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.OptionsBackplaneClusterClusterIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OptionsBackplaneClusterClusterIdWithResponse indicates an expected call of OptionsBackplaneClusterClusterIdWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) OptionsBackplaneClusterClusterIdWithResponse(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptionsBackplaneClusterClusterIdWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).OptionsBackplaneClusterClusterIdWithResponse), varargs...)
}

// OptionsBackplaneRemediateClusterIdRemediationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) OptionsBackplaneRemediateClusterIdRemediationWithResponse(ctx context.Context, clusterId, remediation string, reqEditors ...Openapi.RequestEditorFn) (*Openapi.OptionsBackplaneRemediateClusterIdRemediationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, remediation}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OptionsBackplaneRemediateClusterIdRemediationWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.OptionsBackplaneRemediateClusterIdRemediationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OptionsBackplaneRemediateClusterIdRemediationWithResponse indicates an expected call of OptionsBackplaneRemediateClusterIdRemediationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) OptionsBackplaneRemediateClusterIdRemediationWithResponse(ctx, clusterId, remediation any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, remediation}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptionsBackplaneRemediateClusterIdRemediationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).OptionsBackplaneRemediateClusterIdRemediationWithResponse), varargs...)
}

// PatchBackplaneClusterClusterIdWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PatchBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*Openapi.PatchBackplaneClusterClusterIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchBackplaneClusterClusterIdWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.PatchBackplaneClusterClusterIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchBackplaneClusterClusterIdWithResponse indicates an expected call of PatchBackplaneClusterClusterIdWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PatchBackplaneClusterClusterIdWithResponse(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchBackplaneClusterClusterIdWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PatchBackplaneClusterClusterIdWithResponse), varargs...)
}

// PatchBackplaneRemediateClusterIdRemediationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PatchBackplaneRemediateClusterIdRemediationWithResponse(ctx context.Context, clusterId, remediation string, reqEditors ...Openapi.RequestEditorFn) (*Openapi.PatchBackplaneRemediateClusterIdRemediationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, remediation}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchBackplaneRemediateClusterIdRemediationWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.PatchBackplaneRemediateClusterIdRemediationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchBackplaneRemediateClusterIdRemediationWithResponse indicates an expected call of PatchBackplaneRemediateClusterIdRemediationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PatchBackplaneRemediateClusterIdRemediationWithResponse(ctx, clusterId, remediation any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, remediation}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchBackplaneRemediateClusterIdRemediationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PatchBackplaneRemediateClusterIdRemediationWithResponse), varargs...)
}

// PostBackplaneClusterClusterIdWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*Openapi.PostBackplaneClusterClusterIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostBackplaneClusterClusterIdWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.PostBackplaneClusterClusterIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostBackplaneClusterClusterIdWithResponse indicates an expected call of PostBackplaneClusterClusterIdWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostBackplaneClusterClusterIdWithResponse(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBackplaneClusterClusterIdWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostBackplaneClusterClusterIdWithResponse), varargs...)
}

// PostBackplaneRemediateClusterIdRemediationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostBackplaneRemediateClusterIdRemediationWithResponse(ctx context.Context, clusterId, remediation string, reqEditors ...Openapi.RequestEditorFn) (*Openapi.PostBackplaneRemediateClusterIdRemediationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, remediation}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostBackplaneRemediateClusterIdRemediationWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.PostBackplaneRemediateClusterIdRemediationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostBackplaneRemediateClusterIdRemediationWithResponse indicates an expected call of PostBackplaneRemediateClusterIdRemediationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostBackplaneRemediateClusterIdRemediationWithResponse(ctx, clusterId, remediation any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, remediation}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostBackplaneRemediateClusterIdRemediationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostBackplaneRemediateClusterIdRemediationWithResponse), varargs...)
}

// PutBackplaneClusterClusterIdWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PutBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*Openapi.PutBackplaneClusterClusterIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutBackplaneClusterClusterIdWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.PutBackplaneClusterClusterIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBackplaneClusterClusterIdWithResponse indicates an expected call of PutBackplaneClusterClusterIdWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PutBackplaneClusterClusterIdWithResponse(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBackplaneClusterClusterIdWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PutBackplaneClusterClusterIdWithResponse), varargs...)
}

// PutBackplaneRemediateClusterIdRemediationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PutBackplaneRemediateClusterIdRemediationWithResponse(ctx context.Context, clusterId, remediation string, reqEditors ...Openapi.RequestEditorFn) (*Openapi.PutBackplaneRemediateClusterIdRemediationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, remediation}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutBackplaneRemediateClusterIdRemediationWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.PutBackplaneRemediateClusterIdRemediationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutBackplaneRemediateClusterIdRemediationWithResponse indicates an expected call of PutBackplaneRemediateClusterIdRemediationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PutBackplaneRemediateClusterIdRemediationWithResponse(ctx, clusterId, remediation any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, remediation}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBackplaneRemediateClusterIdRemediationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PutBackplaneRemediateClusterIdRemediationWithResponse), varargs...)
}

// TraceBackplaneClusterClusterIdWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TraceBackplaneClusterClusterIdWithResponse(ctx context.Context, clusterId string, reqEditors ...Openapi.RequestEditorFn) (*Openapi.TraceBackplaneClusterClusterIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TraceBackplaneClusterClusterIdWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.TraceBackplaneClusterClusterIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TraceBackplaneClusterClusterIdWithResponse indicates an expected call of TraceBackplaneClusterClusterIdWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TraceBackplaneClusterClusterIdWithResponse(ctx, clusterId any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceBackplaneClusterClusterIdWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TraceBackplaneClusterClusterIdWithResponse), varargs...)
}

// TraceBackplaneRemediateClusterIdRemediationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) TraceBackplaneRemediateClusterIdRemediationWithResponse(ctx context.Context, clusterId, remediation string, reqEditors ...Openapi.RequestEditorFn) (*Openapi.TraceBackplaneRemediateClusterIdRemediationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, clusterId, remediation}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TraceBackplaneRemediateClusterIdRemediationWithResponse", varargs...)
	ret0, _ := ret[0].(*Openapi.TraceBackplaneRemediateClusterIdRemediationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TraceBackplaneRemediateClusterIdRemediationWithResponse indicates an expected call of TraceBackplaneRemediateClusterIdRemediationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) TraceBackplaneRemediateClusterIdRemediationWithResponse(ctx, clusterId, remediation any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, clusterId, remediation}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TraceBackplaneRemediateClusterIdRemediationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).TraceBackplaneRemediateClusterIdRemediationWithResponse), varargs...)
}
